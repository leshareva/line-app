import React from 'react';

import { Panel, Div, FixedLayout, Separator, Button, Link, ANDROID, platform, FormLayout, File, Avatar, PopoutWrapper } from '@vkontakte/vkui';
import "./LessonCard.css";
import Cover from '../Cover/Cover';
import ReactMarkdown from 'react-markdown';
import bridge from '@vkontakte/vk-bridge';
import Navbar from '../Navbar/Navbar';
import { parseQueryString, parseDate, Time, formatLessonTime } from '../Helpers';
import { iUser, iRubric } from '../../interfaces';
import { base } from '../../Airtable';


const osname = platform();

interface iLessonCard {
	id: string
	lessonID: string
	user: iUser
	onBackClick: (route: string, meta?: any) => void
	backTo?: string
	purchases: any[]
	rubric?: iRubric
	lesson?: any
}


class LessonCard extends React.Component<iLessonCard, any> {

	_isMounted: boolean
	state = { message: null, lesson: null, rubric: null, selectedFile: null }

	constructor(props) {
		super(props)
		this._isMounted = false;
	}

	async componentDidMount() {
		this._isMounted = true;

		let { lesson, rubric } = this.props

		//–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç lesson, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–µ–ª–∞–µ–º —Ñ–µ—Ç—á
		let les = lesson ? lesson : await this.fetchLessonData();
		if (!les) return this.props.onBackClick('profile')
		//–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–±—ä–µ–∫—Ç rubric, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–µ–ª–∞–µ–º —Ñ–µ—Ç—á
		let rub = rubric ? rubric : await this.fetchRubric(les['RubricID']);
		if (this._isMounted) this.setState({ rubric: rub, lesson: les })

		if (this.state.lesson) this.checkPermissions();
		(osname === ANDROID) ? bridge.send("VKWebAppSetViewSettings", { "status_bar_style": "dark", "action_bar_color": "#ffffff" }) : bridge.send("VKWebAppSetViewSettings", { "status_bar_style": "dark", });
	}

	componentWillUnmount() {
		this._isMounted = false;
	}

	async fetchLessonData() {
		let lessons = await base.list('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', { filterByFormula: `{recID}="${this.props.lessonID}"` })
		if (!lessons[0]) return null
		let lesson = formatLessonTime(lessons[0]);
		return lesson
	}


	

	sendData = async () => {
		// let data = this.state.lesson;
		let { rubric } = this.state
		let { user, purchases, lessonID } = this.props

		let purchase = purchases.find(el => el['–†—É–±—Ä–∏–∫–∞'].find(rubricID => rubricID === rubric.recID))
		let opt = {
			"–î–∞—Ç–∞–≤—Ä–µ–º—è": new Date().toISOString(),
			"–ü—Ä–æ—Ñ–∏–ª—å": [user.recID],
			"–ë–∞–ª–ª—ã": 1,
			"–†—É–±—Ä–∏–∫–∞": rubric.recID,
			"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
			"–ü–æ–∫—É–ø–∫–∏": purchase ? [purchase.recID] : null,
			"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": [lessonID]
		}

		await base.create(opt, rubric['–¢–∞–±–ª–∏—Ü–∞']).then(res => {
			const queryParams = parseQueryString(window.location.search);
			if (queryParams && queryParams.vk_are_notifications_enabled === "0") bridge.send("VKWebAppAllowNotifications", {});
			this.setState({
				message: (() => {
					return <div>–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã <Link onClick={() => this.undo(res, rubric['–¢–∞–±–ª–∏—Ü–∞'])}>–û—Ç–º–µ–Ω–∏—Ç—å</Link></div>
				})()
			})


		}).catch(_ => this.setState({
			message: (() => {
				return <div>–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞ <a href="mailto:reva@leandesign.pro">reva@leandesign.pro</a></div>
			})()
		}))

	}

	undo = (obj, listName) => { base.delete([obj.recID], listName).then(res => this.setState({ message: null })).catch(console.log) }


	checkPermissions = () => {

		let { lesson, rubric } = this.state

		//–µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç?
		let purchases = this.props.purchases || [];

		if (purchases.length === 0 && rubric['–¢–æ–≤–∞—Ä']) return this.setState({ message: '–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–µ–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç' });

		if (!lesson['–£—á–∞—Å—Ç–Ω–∏–∫–∏']) return this.setState({ message: null })

		if (lesson['–û—Å—Ç–∞–ª–æ—Å—å'] === 0) return this.setState({ message: '–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ' })

		if (this.props.user && !lesson['–°—Å—ã–ª–∫–∞'] && lesson['–£—á–∞—Å—Ç–Ω–∏–∫–∏'].find(el => +el === this.props.user['VK-ID'])) return this.setState({ message: 'üëçüèª –¢—ã –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö' })
		if (this.props.user && lesson['–°—Å—ã–ª–∫–∞'] && lesson['–£—á–∞—Å—Ç–Ω–∏–∫–∏'].find(el => +el === this.props.user['VK-ID'])) return this.setState({ message: 'üëçüèª –†–∞–±–æ—Ç–∞ —Å–¥–∞–Ω–∞' })

	}

	fetchRubric = (rubricID: string) => {
		return base.find(rubricID, '–†—É–±—Ä–∏–∫–∏')
	}


	render() {

		let {
			onBackClick,
			id,
			user,
			backTo
		} = this.props

		let { lesson, rubric } = this.state


		if (!lesson || !user) return <div id={id}>‚Ä¶</div>
		let getImage = () => lesson['–û–±–ª–æ–∂–∫–∞'] ? <Avatar src={lesson['–û–±–ª–æ–∂–∫–∞'][0]['url']} mode="image" size={80} /> : null

		return (

			<Panel id={id}>
				<Navbar go={() => onBackClick(backTo ? backTo : 'rubric', rubric)} buttonColor="black"></Navbar>
				<Cover background="#f2f2f2" height='fit-content'>
					<Div style={{ maxWidth: '62vw', color: 'black' }}>
						<h1>{lesson['Name']}</h1>
						<div className="lead">{`${lesson['–î–∞—Ç–∞']}, ${lesson['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏']}`} <br />
							{lesson['–í—Ä–µ–º—è']}</div>
					</Div>
				</Cover>
				<Separator />
				<Div className="desc">
					<ReactMarkdown source={lesson['–û–ø–∏—Å–∞–Ω–∏–µ']} />
					{getImage()}
				</Div>
				<FixedLayout vertical="bottom" className="bottomBar" style={lesson['–£—á–∞—Å—Ç–Ω–∏–∫–∏'].find(el => +el === user['VK-ID']) ? { background: 'var(--color-spacegray)' } : {}}>
					{
						(() => {
							if (this.state.message) return <div>{this.state.message}</div>
							return lesson['–°—Å—ã–ª–∫–∞'] ? <Button size={'l'} href={lesson['–°—Å—ã–ª–∫–∞']} target="_blank" stretched={true}>–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É</Button> : <Button size={'l'} stretched={true} onClick={() => this.sendData()}>–Ø –±—É–¥—É</Button>
						})()
					}

				</FixedLayout>
			</Panel>

		);
	}
}



export default LessonCard;